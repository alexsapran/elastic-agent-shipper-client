// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

syntax = "proto3";

option go_package = "github.com/elastic/elastic-agent-shipper-client/pkg/proto";
package elastic.agent.shipper.v1;

import "messages/publish.proto";
import "messages/persisted_index.proto";

service Producer {
 // Publishes a list of events via the Elastic agent shipper.
 // Blocks until all processing steps complete and data is written to the queue.
 //
 // If the queue could not accept some events from the request, this returns a successful response
 // containing a count of events that were accepted by the queue.
 // The client is expected to retry sending the rest of the events in a separate request.
 // 
 // The client is also expected to have some kind of backoff strategy
 //	in case of a reply with an accepted count < the amount of sent events.
 rpc PublishEvents(messages.PublishRequest) returns (messages.PublishReply);
 // Returns the shipper's uuid and its current position in the event stream (persisted index).
 rpc PersistedIndex(messages.PersistedIndexRequest) returns (stream messages.PersistedIndexReply);
}